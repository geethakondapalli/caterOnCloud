{"ast":null,"code":"import { jsPDF } from 'jspdf';\nimport html2canvas from 'html2canvas';\nclass InvoiceService {\n  // Generate invoice data structure\n  generateInvoiceData(orderDetails, customerInfo, menuData) {\n    const invoiceNumber = `INV-${orderDetails.order_id}-${new Date().getFullYear()}`;\n    const invoiceDate = new Date().toLocaleDateString('en-GB');\n    const dueDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString('en-GB'); // 30 days from now\n\n    return {\n      invoice: {\n        number: invoiceNumber,\n        date: invoiceDate,\n        dueDate: dueDate,\n        status: orderDetails.payment_status === 'completed' ? 'PAID' : 'PENDING'\n      },\n      company: {\n        name: \"Delicious Catering Co.\",\n        address: \"123 Main Street\",\n        city: \"London\",\n        postcode: \"SW1A 1AA\",\n        phone: \"020 1234 5678\",\n        email: \"orders@deliciouscatering.co.uk\",\n        website: \"www.deliciouscatering.co.uk\"\n      },\n      customer: {\n        name: customerInfo.name,\n        email: customerInfo.email,\n        phone: customerInfo.phone,\n        address: customerInfo.address\n      },\n      order: {\n        id: orderDetails.order_id,\n        date: new Date(orderDetails.order_date).toLocaleDateString('en-GB'),\n        deliveryDate: new Date(orderDetails.delivery_date).toLocaleDateString('en-GB'),\n        type: customerInfo.orderType,\n        menuName: (menuData === null || menuData === void 0 ? void 0 : menuData.name) || 'Custom Menu'\n      },\n      items: Object.values(orderDetails.items).map(item => ({\n        name: item.item_name,\n        quantity: item.quantity,\n        unitPrice: parseFloat(item.price),\n        total: parseFloat(item.price) * item.quantity,\n        description: item.description || ''\n      })),\n      totals: {\n        subtotal: parseFloat(orderDetails.total),\n        tax: 0,\n        // Add tax calculation if needed\n        total: parseFloat(orderDetails.total)\n      },\n      notes: orderDetails.special_instructions || customerInfo.notes || '',\n      paymentMethod: orderDetails.payment_method\n    };\n  }\n\n  // Generate HTML invoice template\n  generateInvoiceHTML(invoiceData) {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <style>\n          body { \n            font-family: Arial, sans-serif; \n            margin: 0; \n            padding: 20px; \n            background: white;\n            color: #333;\n          }\n          .invoice-container { \n            max-width: 800px; \n            margin: 0 auto; \n            background: white;\n            border: 1px solid #ddd;\n          }\n          .header { \n            background: #2563eb; \n            color: white; \n            padding: 30px; \n            display: flex; \n            justify-content: space-between; \n            align-items: flex-start;\n          }\n          .company-info h1 { \n            margin: 0 0 10px 0; \n            font-size: 28px; \n          }\n          .company-info p { \n            margin: 2px 0; \n            opacity: 0.9; \n          }\n          .invoice-info { \n            text-align: right; \n          }\n          .invoice-info h2 { \n            margin: 0 0 10px 0; \n            font-size: 24px; \n          }\n          .status-badge { \n            display: inline-block; \n            padding: 5px 15px; \n            border-radius: 20px; \n            font-weight: bold; \n            font-size: 12px;\n          }\n          .status-paid { \n            background: #10b981; \n            color: white; \n          }\n          .status-pending { \n            background: #f59e0b; \n            color: white; \n          }\n          .content { \n            padding: 30px; \n          }\n          .billing-section { \n            display: flex; \n            justify-content: space-between; \n            margin-bottom: 30px; \n          }\n          .billing-info h3 { \n            margin: 0 0 15px 0; \n            color: #2563eb; \n            border-bottom: 2px solid #e5e7eb; \n            padding-bottom: 5px; \n          }\n          .billing-info p { \n            margin: 5px 0; \n          }\n          .order-details { \n            background: #f8fafc; \n            padding: 20px; \n            border-radius: 8px; \n            margin-bottom: 30px; \n          }\n          .order-details h3 { \n            margin: 0 0 15px 0; \n            color: #2563eb; \n          }\n          .order-grid { \n            display: grid; \n            grid-template-columns: 1fr 1fr; \n            gap: 15px; \n          }\n          .items-table { \n            width: 100%; \n            border-collapse: collapse; \n            margin-bottom: 30px; \n          }\n          .items-table th { \n            background: #f1f5f9; \n            padding: 12px; \n            text-align: left; \n            border-bottom: 2px solid #e2e8f0; \n            font-weight: bold; \n          }\n          .items-table td { \n            padding: 12px; \n            border-bottom: 1px solid #e2e8f0; \n          }\n          .items-table tr:hover { \n            background: #f8fafc; \n          }\n          .text-right { \n            text-align: right; \n          }\n          .totals-section { \n            float: right; \n            width: 300px; \n            margin-top: 20px; \n          }\n          .total-row { \n            display: flex; \n            justify-content: space-between; \n            padding: 8px 0; \n            border-bottom: 1px solid #e2e8f0; \n          }\n          .total-row.final { \n            background: #2563eb; \n            color: white; \n            padding: 15px; \n            margin-top: 10px; \n            font-weight: bold; \n            font-size: 18px; \n          }\n          .notes-section { \n            clear: both; \n            margin-top: 40px; \n            padding-top: 20px; \n            border-top: 2px solid #e5e7eb; \n          }\n          .footer { \n            background: #f8fafc; \n            padding: 20px 30px; \n            text-align: center; \n            border-top: 1px solid #e2e8f0; \n            color: #6b7280; \n            font-size: 14px; \n          }\n          @media print {\n            body { margin: 0; padding: 0; }\n            .invoice-container { border: none; }\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"invoice-container\">\n          <!-- Header -->\n          <div class=\"header\">\n            <div class=\"company-info\">\n              <h1>${invoiceData.company.name}</h1>\n              <p>${invoiceData.company.address}</p>\n              <p>${invoiceData.company.city}, ${invoiceData.company.postcode}</p>\n              <p>Phone: ${invoiceData.company.phone}</p>\n              <p>Email: ${invoiceData.company.email}</p>\n            </div>\n            <div class=\"invoice-info\">\n              <h2>INVOICE</h2>\n              <p><strong>${invoiceData.invoice.number}</strong></p>\n              <p>Date: ${invoiceData.invoice.date}</p>\n              <p>Due: ${invoiceData.invoice.dueDate}</p>\n              <span class=\"status-badge ${invoiceData.invoice.status === 'PAID' ? 'status-paid' : 'status-pending'}\">\n                ${invoiceData.invoice.status}\n              </span>\n            </div>\n          </div>\n\n          <!-- Content -->\n          <div class=\"content\">\n            <!-- Billing Information -->\n            <div class=\"billing-section\">\n              <div class=\"billing-info\">\n                <h3>Bill To:</h3>\n                <p><strong>${invoiceData.customer.name}</strong></p>\n                ${invoiceData.customer.email ? `<p>${invoiceData.customer.email}</p>` : ''}\n                <p>${invoiceData.customer.phone}</p>\n                ${invoiceData.customer.address ? `<p>${invoiceData.customer.address}</p>` : ''}\n              </div>\n              <div class=\"billing-info\">\n                <h3>Order Information:</h3>\n                <p><strong>Order #:</strong> ${invoiceData.order.id}</p>\n                <p><strong>Order Date:</strong> ${invoiceData.order.date}</p>\n                <p><strong>Delivery Date:</strong> ${invoiceData.order.deliveryDate}</p>\n                <p><strong>Service Type:</strong> ${invoiceData.order.type === 'pickup' ? 'Pickup' : 'Delivery'}</p>\n                <p><strong>Menu:</strong> ${invoiceData.order.menuName}</p>\n              </div>\n            </div>\n\n            <!-- Items Table -->\n            <table class=\"items-table\">\n              <thead>\n                <tr>\n                  <th>Item</th>\n                  <th class=\"text-right\">Qty</th>\n                  <th class=\"text-right\">Unit Price</th>\n                  <th class=\"text-right\">Total</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${invoiceData.items.map(item => `\n                  <tr>\n                    <td>\n                      <strong>${item.name}</strong>\n                      ${item.description ? `<br><small style=\"color: #6b7280;\">${item.description}</small>` : ''}\n                    </td>\n                    <td class=\"text-right\">${item.quantity}</td>\n                    <td class=\"text-right\">£${item.unitPrice.toFixed(2)}</td>\n                    <td class=\"text-right\">£${item.total.toFixed(2)}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n\n            <!-- Totals -->\n            <div class=\"totals-section\">\n              <div class=\"total-row\">\n                <span>Subtotal:</span>\n                <span>£${invoiceData.totals.subtotal.toFixed(2)}</span>\n              </div>\n              ${invoiceData.totals.tax > 0 ? `\n                <div class=\"total-row\">\n                  <span>Tax:</span>\n                  <span>£${invoiceData.totals.tax.toFixed(2)}</span>\n                </div>\n              ` : ''}\n              <div class=\"total-row final\">\n                <span>Total:</span>\n                <span>£${invoiceData.totals.total.toFixed(2)}</span>\n              </div>\n            </div>\n\n            <!-- Notes -->\n            ${invoiceData.notes ? `\n              <div class=\"notes-section\">\n                <h3>Special Instructions:</h3>\n                <p>${invoiceData.notes}</p>\n              </div>\n            ` : ''}\n\n            <!-- Payment Information -->\n            <div class=\"notes-section\">\n              <h3>Payment Information:</h3>\n              <p><strong>Payment Method:</strong> ${invoiceData.paymentMethod === 'online' ? 'Online Payment' : 'Pay on Collection/Delivery'}</p>\n              ${invoiceData.invoice.status === 'PENDING' && invoiceData.paymentMethod === 'offline' ? '<p style=\"color: #f59e0b;\"><strong>Please have payment ready upon collection/delivery.</strong></p>' : ''}\n            </div>\n          </div>\n\n          <!-- Footer -->\n          <div class=\"footer\">\n            <p>Thank you for choosing ${invoiceData.company.name}!</p>\n            <p>For any questions regarding this invoice, please contact us at ${invoiceData.company.phone} or ${invoiceData.company.email}</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  // Generate PDF from HTML\n  async generateInvoicePDF(invoiceData) {\n    const html = this.generateInvoiceHTML(invoiceData);\n\n    // Create temporary div to render HTML\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = html;\n    tempDiv.style.position = 'absolute';\n    tempDiv.style.left = '-9999px';\n    tempDiv.style.width = '800px';\n    document.body.appendChild(tempDiv);\n    try {\n      // Convert HTML to canvas\n      const canvas = await html2canvas(tempDiv, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true\n      });\n\n      // Create PDF\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const imgWidth = 210; // A4 width in mm\n      const pageHeight = 295; // A4 height in mm\n      const imgHeight = canvas.height * imgWidth / canvas.width;\n      let heightLeft = imgHeight;\n      let position = 0;\n\n      // Add image to PDF\n      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight);\n      heightLeft -= pageHeight;\n\n      // Add new page if content is longer than one page\n      while (heightLeft >= 0) {\n        position = heightLeft - imgHeight;\n        pdf.addPage();\n        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight);\n        heightLeft -= pageHeight;\n      }\n      return pdf;\n    } finally {\n      // Clean up\n      document.body.removeChild(tempDiv);\n    }\n  }\n\n  // Email service integration\n  async sendInvoiceByEmail(invoiceData, recipientEmail) {\n    try {\n      const pdf = await this.generateInvoicePDF(invoiceData);\n      const pdfBlob = pdf.output('blob');\n\n      // Convert blob to base64 for email attachment\n      const base64PDF = await this.blobToBase64(pdfBlob);\n      const emailData = {\n        to: recipientEmail,\n        subject: `Invoice ${invoiceData.invoice.number} - ${invoiceData.company.name}`,\n        html: this.generateEmailTemplate(invoiceData),\n        attachments: [{\n          filename: `invoice-${invoiceData.invoice.number}.pdf`,\n          content: base64PDF,\n          type: 'application/pdf'\n        }]\n      };\n\n      // Send email via your backend API\n      const response = await fetch('/api/send-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(emailData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send email');\n      }\n      return {\n        success: true,\n        message: 'Invoice sent successfully via email'\n      };\n    } catch (error) {\n      console.error('Error sending invoice by email:', error);\n      throw error;\n    }\n  }\n\n  // SMS service integration\n  async sendInvoiceBySMS(invoiceData, phoneNumber) {\n    try {\n      const smsMessage = `\nHello ${invoiceData.customer.name}!\n\nYour invoice is ready:\nInvoice: ${invoiceData.invoice.number}\nOrder: #${invoiceData.order.id}\nTotal: £${invoiceData.totals.total.toFixed(2)}\nStatus: ${invoiceData.invoice.status}\n\n${invoiceData.invoice.status === 'PENDING' ? `Payment due: ${invoiceData.invoice.dueDate}` : 'Payment completed - Thank you!'}\n\nView full invoice: ${window.location.origin}/invoice/${invoiceData.invoice.number}\n\n${invoiceData.company.name}\n${invoiceData.company.phone}\n      `.trim();\n      const smsData = {\n        to: phoneNumber,\n        message: smsMessage\n      };\n\n      // Send SMS via your backend API\n      const response = await fetch('/api/send-sms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(smsData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send SMS');\n      }\n      return {\n        success: true,\n        message: 'Invoice sent successfully via SMS'\n      };\n    } catch (error) {\n      console.error('Error sending invoice by SMS:', error);\n      throw error;\n    }\n  }\n\n  // Generate email template\n  generateEmailTemplate(invoiceData) {\n    return `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background: #2563eb; color: white; padding: 20px; text-align: center;\">\n          <h1>${invoiceData.company.name}</h1>\n          <p>Invoice ${invoiceData.invoice.number}</p>\n        </div>\n        \n        <div style=\"padding: 20px; background: #f8fafc;\">\n          <h2>Hello ${invoiceData.customer.name},</h2>\n          \n          <p>Thank you for your order! Please find your invoice attached.</p>\n          \n          <div style=\"background: white; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3>Order Summary:</h3>\n            <p><strong>Order #:</strong> ${invoiceData.order.id}</p>\n            <p><strong>Delivery Date:</strong> ${invoiceData.order.deliveryDate}</p>\n            <p><strong>Total Amount:</strong> £${invoiceData.totals.total.toFixed(2)}</p>\n            <p><strong>Status:</strong> <span style=\"color: ${invoiceData.invoice.status === 'PAID' ? '#10b981' : '#f59e0b'};\">${invoiceData.invoice.status}</span></p>\n          </div>\n          \n          ${invoiceData.invoice.status === 'PENDING' ? `\n            <div style=\"background: #fef3c7; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;\">\n              <p><strong>Payment Due:</strong> ${invoiceData.invoice.dueDate}</p>\n              <p>Please ensure payment is ready for ${invoiceData.order.type === 'pickup' ? 'collection' : 'delivery'}.</p>\n            </div>\n          ` : `\n            <div style=\"background: #d1fae5; padding: 15px; border-radius: 8px; border-left: 4px solid #10b981;\">\n              <p><strong>Payment Completed</strong> - Thank you!</p>\n            </div>\n          `}\n          \n          <p>If you have any questions, please don't hesitate to contact us:</p>\n          <p>📞 ${invoiceData.company.phone}<br>\n          📧 ${invoiceData.company.email}</p>\n          \n          <p>Thank you for choosing ${invoiceData.company.name}!</p>\n        </div>\n        \n        <div style=\"background: #374151; color: white; padding: 20px; text-align: center; font-size: 14px;\">\n          <p>${invoiceData.company.name} | ${invoiceData.company.address}, ${invoiceData.company.city}</p>\n        </div>\n      </div>\n    `;\n  }\n\n  // Helper function to convert blob to base64\n  blobToBase64(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result.split(',')[1]);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  // Download invoice PDF\n  async downloadInvoice(invoiceData) {\n    try {\n      const pdf = await this.generateInvoicePDF(invoiceData);\n      pdf.save(`invoice-${invoiceData.invoice.number}.pdf`);\n      return {\n        success: true,\n        message: 'Invoice downloaded successfully'\n      };\n    } catch (error) {\n      console.error('Error downloading invoice:', error);\n      throw error;\n    }\n  }\n\n  // Preview invoice in new window\n  previewInvoice(invoiceData) {\n    const html = this.generateInvoiceHTML(invoiceData);\n    const newWindow = window.open('', '_blank');\n    newWindow.document.write(html);\n    newWindow.document.close();\n  }\n}\n\n// Usage in your OrderForm component:\n// Add this to your handlePaymentSuccess and offline order completion\n\nconst invoiceService = new InvoiceService();\n\n// Example usage after order completion:\nconst sendInvoiceToCustomer = async (orderDetails, customerInfo, menuData) => {\n  try {\n    const invoiceData = invoiceService.generateInvoiceData(orderDetails, customerInfo, menuData);\n\n    // Send via email if customer provided email\n    if (customerInfo.email) {\n      await invoiceService.sendInvoiceByEmail(invoiceData, customerInfo.email);\n      console.log('Invoice sent via email');\n    }\n\n    // Send via SMS if customer provided phone\n    if (customerInfo.phone) {\n      await invoiceService.sendInvoiceBySMS(invoiceData, customerInfo.phone);\n      console.log('Invoice sent via SMS');\n    }\n\n    // Also offer download option\n    return invoiceData;\n  } catch (error) {\n    console.error('Error sending invoice:', error);\n    throw error;\n  }\n};\nexport { InvoiceService, sendInvoiceToCustomer };","map":{"version":3,"names":["jsPDF","html2canvas","InvoiceService","generateInvoiceData","orderDetails","customerInfo","menuData","invoiceNumber","order_id","Date","getFullYear","invoiceDate","toLocaleDateString","dueDate","now","invoice","number","date","status","payment_status","company","name","address","city","postcode","phone","email","website","customer","order","id","order_date","deliveryDate","delivery_date","type","orderType","menuName","items","Object","values","map","item","item_name","quantity","unitPrice","parseFloat","price","total","description","totals","subtotal","tax","notes","special_instructions","paymentMethod","payment_method","generateInvoiceHTML","invoiceData","toFixed","join","generateInvoicePDF","html","tempDiv","document","createElement","innerHTML","style","position","left","width","body","appendChild","canvas","scale","useCORS","allowTaint","pdf","imgWidth","pageHeight","imgHeight","height","heightLeft","addImage","toDataURL","addPage","removeChild","sendInvoiceByEmail","recipientEmail","pdfBlob","output","base64PDF","blobToBase64","emailData","to","subject","generateEmailTemplate","attachments","filename","content","response","fetch","method","headers","JSON","stringify","ok","Error","success","message","error","console","sendInvoiceBySMS","phoneNumber","smsMessage","window","location","origin","trim","smsData","blob","Promise","resolve","reject","reader","FileReader","onload","result","split","onerror","readAsDataURL","downloadInvoice","save","previewInvoice","newWindow","open","write","close","invoiceService","sendInvoiceToCustomer","log"],"sources":["/Users/ashokdonepudi/Documents/CaterOnCloud/mycloudkitchen-frontend/src/components/orders/Invoice.js"],"sourcesContent":["import { jsPDF } from 'jspdf';\nimport html2canvas from 'html2canvas';\n\nclass InvoiceService {\n  \n  // Generate invoice data structure\n  generateInvoiceData(orderDetails, customerInfo, menuData) {\n    const invoiceNumber = `INV-${orderDetails.order_id}-${new Date().getFullYear()}`;\n    const invoiceDate = new Date().toLocaleDateString('en-GB');\n    const dueDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString('en-GB'); // 30 days from now\n\n    return {\n      invoice: {\n        number: invoiceNumber,\n        date: invoiceDate,\n        dueDate: dueDate,\n        status: orderDetails.payment_status === 'completed' ? 'PAID' : 'PENDING'\n      },\n      company: {\n        name: \"Delicious Catering Co.\",\n        address: \"123 Main Street\",\n        city: \"London\",\n        postcode: \"SW1A 1AA\",\n        phone: \"020 1234 5678\",\n        email: \"orders@deliciouscatering.co.uk\",\n        website: \"www.deliciouscatering.co.uk\"\n      },\n      customer: {\n        name: customerInfo.name,\n        email: customerInfo.email,\n        phone: customerInfo.phone,\n        address: customerInfo.address\n      },\n      order: {\n        id: orderDetails.order_id,\n        date: new Date(orderDetails.order_date).toLocaleDateString('en-GB'),\n        deliveryDate: new Date(orderDetails.delivery_date).toLocaleDateString('en-GB'),\n        type: customerInfo.orderType,\n        menuName: menuData?.name || 'Custom Menu'\n      },\n      items: Object.values(orderDetails.items).map(item => ({\n        name: item.item_name,\n        quantity: item.quantity,\n        unitPrice: parseFloat(item.price),\n        total: parseFloat(item.price) * item.quantity,\n        description: item.description || ''\n      })),\n      totals: {\n        subtotal: parseFloat(orderDetails.total),\n        tax: 0, // Add tax calculation if needed\n        total: parseFloat(orderDetails.total)\n      },\n      notes: orderDetails.special_instructions || customerInfo.notes || '',\n      paymentMethod: orderDetails.payment_method\n    };\n  }\n\n  // Generate HTML invoice template\n  generateInvoiceHTML(invoiceData) {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <style>\n          body { \n            font-family: Arial, sans-serif; \n            margin: 0; \n            padding: 20px; \n            background: white;\n            color: #333;\n          }\n          .invoice-container { \n            max-width: 800px; \n            margin: 0 auto; \n            background: white;\n            border: 1px solid #ddd;\n          }\n          .header { \n            background: #2563eb; \n            color: white; \n            padding: 30px; \n            display: flex; \n            justify-content: space-between; \n            align-items: flex-start;\n          }\n          .company-info h1 { \n            margin: 0 0 10px 0; \n            font-size: 28px; \n          }\n          .company-info p { \n            margin: 2px 0; \n            opacity: 0.9; \n          }\n          .invoice-info { \n            text-align: right; \n          }\n          .invoice-info h2 { \n            margin: 0 0 10px 0; \n            font-size: 24px; \n          }\n          .status-badge { \n            display: inline-block; \n            padding: 5px 15px; \n            border-radius: 20px; \n            font-weight: bold; \n            font-size: 12px;\n          }\n          .status-paid { \n            background: #10b981; \n            color: white; \n          }\n          .status-pending { \n            background: #f59e0b; \n            color: white; \n          }\n          .content { \n            padding: 30px; \n          }\n          .billing-section { \n            display: flex; \n            justify-content: space-between; \n            margin-bottom: 30px; \n          }\n          .billing-info h3 { \n            margin: 0 0 15px 0; \n            color: #2563eb; \n            border-bottom: 2px solid #e5e7eb; \n            padding-bottom: 5px; \n          }\n          .billing-info p { \n            margin: 5px 0; \n          }\n          .order-details { \n            background: #f8fafc; \n            padding: 20px; \n            border-radius: 8px; \n            margin-bottom: 30px; \n          }\n          .order-details h3 { \n            margin: 0 0 15px 0; \n            color: #2563eb; \n          }\n          .order-grid { \n            display: grid; \n            grid-template-columns: 1fr 1fr; \n            gap: 15px; \n          }\n          .items-table { \n            width: 100%; \n            border-collapse: collapse; \n            margin-bottom: 30px; \n          }\n          .items-table th { \n            background: #f1f5f9; \n            padding: 12px; \n            text-align: left; \n            border-bottom: 2px solid #e2e8f0; \n            font-weight: bold; \n          }\n          .items-table td { \n            padding: 12px; \n            border-bottom: 1px solid #e2e8f0; \n          }\n          .items-table tr:hover { \n            background: #f8fafc; \n          }\n          .text-right { \n            text-align: right; \n          }\n          .totals-section { \n            float: right; \n            width: 300px; \n            margin-top: 20px; \n          }\n          .total-row { \n            display: flex; \n            justify-content: space-between; \n            padding: 8px 0; \n            border-bottom: 1px solid #e2e8f0; \n          }\n          .total-row.final { \n            background: #2563eb; \n            color: white; \n            padding: 15px; \n            margin-top: 10px; \n            font-weight: bold; \n            font-size: 18px; \n          }\n          .notes-section { \n            clear: both; \n            margin-top: 40px; \n            padding-top: 20px; \n            border-top: 2px solid #e5e7eb; \n          }\n          .footer { \n            background: #f8fafc; \n            padding: 20px 30px; \n            text-align: center; \n            border-top: 1px solid #e2e8f0; \n            color: #6b7280; \n            font-size: 14px; \n          }\n          @media print {\n            body { margin: 0; padding: 0; }\n            .invoice-container { border: none; }\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"invoice-container\">\n          <!-- Header -->\n          <div class=\"header\">\n            <div class=\"company-info\">\n              <h1>${invoiceData.company.name}</h1>\n              <p>${invoiceData.company.address}</p>\n              <p>${invoiceData.company.city}, ${invoiceData.company.postcode}</p>\n              <p>Phone: ${invoiceData.company.phone}</p>\n              <p>Email: ${invoiceData.company.email}</p>\n            </div>\n            <div class=\"invoice-info\">\n              <h2>INVOICE</h2>\n              <p><strong>${invoiceData.invoice.number}</strong></p>\n              <p>Date: ${invoiceData.invoice.date}</p>\n              <p>Due: ${invoiceData.invoice.dueDate}</p>\n              <span class=\"status-badge ${invoiceData.invoice.status === 'PAID' ? 'status-paid' : 'status-pending'}\">\n                ${invoiceData.invoice.status}\n              </span>\n            </div>\n          </div>\n\n          <!-- Content -->\n          <div class=\"content\">\n            <!-- Billing Information -->\n            <div class=\"billing-section\">\n              <div class=\"billing-info\">\n                <h3>Bill To:</h3>\n                <p><strong>${invoiceData.customer.name}</strong></p>\n                ${invoiceData.customer.email ? `<p>${invoiceData.customer.email}</p>` : ''}\n                <p>${invoiceData.customer.phone}</p>\n                ${invoiceData.customer.address ? `<p>${invoiceData.customer.address}</p>` : ''}\n              </div>\n              <div class=\"billing-info\">\n                <h3>Order Information:</h3>\n                <p><strong>Order #:</strong> ${invoiceData.order.id}</p>\n                <p><strong>Order Date:</strong> ${invoiceData.order.date}</p>\n                <p><strong>Delivery Date:</strong> ${invoiceData.order.deliveryDate}</p>\n                <p><strong>Service Type:</strong> ${invoiceData.order.type === 'pickup' ? 'Pickup' : 'Delivery'}</p>\n                <p><strong>Menu:</strong> ${invoiceData.order.menuName}</p>\n              </div>\n            </div>\n\n            <!-- Items Table -->\n            <table class=\"items-table\">\n              <thead>\n                <tr>\n                  <th>Item</th>\n                  <th class=\"text-right\">Qty</th>\n                  <th class=\"text-right\">Unit Price</th>\n                  <th class=\"text-right\">Total</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${invoiceData.items.map(item => `\n                  <tr>\n                    <td>\n                      <strong>${item.name}</strong>\n                      ${item.description ? `<br><small style=\"color: #6b7280;\">${item.description}</small>` : ''}\n                    </td>\n                    <td class=\"text-right\">${item.quantity}</td>\n                    <td class=\"text-right\">£${item.unitPrice.toFixed(2)}</td>\n                    <td class=\"text-right\">£${item.total.toFixed(2)}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n\n            <!-- Totals -->\n            <div class=\"totals-section\">\n              <div class=\"total-row\">\n                <span>Subtotal:</span>\n                <span>£${invoiceData.totals.subtotal.toFixed(2)}</span>\n              </div>\n              ${invoiceData.totals.tax > 0 ? `\n                <div class=\"total-row\">\n                  <span>Tax:</span>\n                  <span>£${invoiceData.totals.tax.toFixed(2)}</span>\n                </div>\n              ` : ''}\n              <div class=\"total-row final\">\n                <span>Total:</span>\n                <span>£${invoiceData.totals.total.toFixed(2)}</span>\n              </div>\n            </div>\n\n            <!-- Notes -->\n            ${invoiceData.notes ? `\n              <div class=\"notes-section\">\n                <h3>Special Instructions:</h3>\n                <p>${invoiceData.notes}</p>\n              </div>\n            ` : ''}\n\n            <!-- Payment Information -->\n            <div class=\"notes-section\">\n              <h3>Payment Information:</h3>\n              <p><strong>Payment Method:</strong> ${invoiceData.paymentMethod === 'online' ? 'Online Payment' : 'Pay on Collection/Delivery'}</p>\n              ${invoiceData.invoice.status === 'PENDING' && invoiceData.paymentMethod === 'offline' ? \n                '<p style=\"color: #f59e0b;\"><strong>Please have payment ready upon collection/delivery.</strong></p>' : ''}\n            </div>\n          </div>\n\n          <!-- Footer -->\n          <div class=\"footer\">\n            <p>Thank you for choosing ${invoiceData.company.name}!</p>\n            <p>For any questions regarding this invoice, please contact us at ${invoiceData.company.phone} or ${invoiceData.company.email}</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  // Generate PDF from HTML\n  async generateInvoicePDF(invoiceData) {\n    const html = this.generateInvoiceHTML(invoiceData);\n    \n    // Create temporary div to render HTML\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = html;\n    tempDiv.style.position = 'absolute';\n    tempDiv.style.left = '-9999px';\n    tempDiv.style.width = '800px';\n    document.body.appendChild(tempDiv);\n\n    try {\n      // Convert HTML to canvas\n      const canvas = await html2canvas(tempDiv, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true\n      });\n\n      // Create PDF\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const imgWidth = 210; // A4 width in mm\n      const pageHeight = 295; // A4 height in mm\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      let heightLeft = imgHeight;\n\n      let position = 0;\n\n      // Add image to PDF\n      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight);\n      heightLeft -= pageHeight;\n\n      // Add new page if content is longer than one page\n      while (heightLeft >= 0) {\n        position = heightLeft - imgHeight;\n        pdf.addPage();\n        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight);\n        heightLeft -= pageHeight;\n      }\n\n      return pdf;\n    } finally {\n      // Clean up\n      document.body.removeChild(tempDiv);\n    }\n  }\n\n  // Email service integration\n  async sendInvoiceByEmail(invoiceData, recipientEmail) {\n    try {\n      const pdf = await this.generateInvoicePDF(invoiceData);\n      const pdfBlob = pdf.output('blob');\n\n      // Convert blob to base64 for email attachment\n      const base64PDF = await this.blobToBase64(pdfBlob);\n\n      const emailData = {\n        to: recipientEmail,\n        subject: `Invoice ${invoiceData.invoice.number} - ${invoiceData.company.name}`,\n        html: this.generateEmailTemplate(invoiceData),\n        attachments: [{\n          filename: `invoice-${invoiceData.invoice.number}.pdf`,\n          content: base64PDF,\n          type: 'application/pdf'\n        }]\n      };\n\n      // Send email via your backend API\n      const response = await fetch('/api/send-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(emailData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send email');\n      }\n\n      return { success: true, message: 'Invoice sent successfully via email' };\n    } catch (error) {\n      console.error('Error sending invoice by email:', error);\n      throw error;\n    }\n  }\n\n  // SMS service integration\n  async sendInvoiceBySMS(invoiceData, phoneNumber) {\n    try {\n      const smsMessage = `\nHello ${invoiceData.customer.name}!\n\nYour invoice is ready:\nInvoice: ${invoiceData.invoice.number}\nOrder: #${invoiceData.order.id}\nTotal: £${invoiceData.totals.total.toFixed(2)}\nStatus: ${invoiceData.invoice.status}\n\n${invoiceData.invoice.status === 'PENDING' ? \n  `Payment due: ${invoiceData.invoice.dueDate}` : \n  'Payment completed - Thank you!'\n}\n\nView full invoice: ${window.location.origin}/invoice/${invoiceData.invoice.number}\n\n${invoiceData.company.name}\n${invoiceData.company.phone}\n      `.trim();\n\n      const smsData = {\n        to: phoneNumber,\n        message: smsMessage\n      };\n\n      // Send SMS via your backend API\n      const response = await fetch('/api/send-sms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(smsData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send SMS');\n      }\n\n      return { success: true, message: 'Invoice sent successfully via SMS' };\n    } catch (error) {\n      console.error('Error sending invoice by SMS:', error);\n      throw error;\n    }\n  }\n\n  // Generate email template\n  generateEmailTemplate(invoiceData) {\n    return `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background: #2563eb; color: white; padding: 20px; text-align: center;\">\n          <h1>${invoiceData.company.name}</h1>\n          <p>Invoice ${invoiceData.invoice.number}</p>\n        </div>\n        \n        <div style=\"padding: 20px; background: #f8fafc;\">\n          <h2>Hello ${invoiceData.customer.name},</h2>\n          \n          <p>Thank you for your order! Please find your invoice attached.</p>\n          \n          <div style=\"background: white; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3>Order Summary:</h3>\n            <p><strong>Order #:</strong> ${invoiceData.order.id}</p>\n            <p><strong>Delivery Date:</strong> ${invoiceData.order.deliveryDate}</p>\n            <p><strong>Total Amount:</strong> £${invoiceData.totals.total.toFixed(2)}</p>\n            <p><strong>Status:</strong> <span style=\"color: ${invoiceData.invoice.status === 'PAID' ? '#10b981' : '#f59e0b'};\">${invoiceData.invoice.status}</span></p>\n          </div>\n          \n          ${invoiceData.invoice.status === 'PENDING' ? `\n            <div style=\"background: #fef3c7; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;\">\n              <p><strong>Payment Due:</strong> ${invoiceData.invoice.dueDate}</p>\n              <p>Please ensure payment is ready for ${invoiceData.order.type === 'pickup' ? 'collection' : 'delivery'}.</p>\n            </div>\n          ` : `\n            <div style=\"background: #d1fae5; padding: 15px; border-radius: 8px; border-left: 4px solid #10b981;\">\n              <p><strong>Payment Completed</strong> - Thank you!</p>\n            </div>\n          `}\n          \n          <p>If you have any questions, please don't hesitate to contact us:</p>\n          <p>📞 ${invoiceData.company.phone}<br>\n          📧 ${invoiceData.company.email}</p>\n          \n          <p>Thank you for choosing ${invoiceData.company.name}!</p>\n        </div>\n        \n        <div style=\"background: #374151; color: white; padding: 20px; text-align: center; font-size: 14px;\">\n          <p>${invoiceData.company.name} | ${invoiceData.company.address}, ${invoiceData.company.city}</p>\n        </div>\n      </div>\n    `;\n  }\n\n  // Helper function to convert blob to base64\n  blobToBase64(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result.split(',')[1]);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  // Download invoice PDF\n  async downloadInvoice(invoiceData) {\n    try {\n      const pdf = await this.generateInvoicePDF(invoiceData);\n      pdf.save(`invoice-${invoiceData.invoice.number}.pdf`);\n      return { success: true, message: 'Invoice downloaded successfully' };\n    } catch (error) {\n      console.error('Error downloading invoice:', error);\n      throw error;\n    }\n  }\n\n  // Preview invoice in new window\n  previewInvoice(invoiceData) {\n    const html = this.generateInvoiceHTML(invoiceData);\n    const newWindow = window.open('', '_blank');\n    newWindow.document.write(html);\n    newWindow.document.close();\n  }\n}\n\n// Usage in your OrderForm component:\n// Add this to your handlePaymentSuccess and offline order completion\n\nconst invoiceService = new InvoiceService();\n\n// Example usage after order completion:\nconst sendInvoiceToCustomer = async (orderDetails, customerInfo, menuData) => {\n  try {\n    const invoiceData = invoiceService.generateInvoiceData(orderDetails, customerInfo, menuData);\n    \n    // Send via email if customer provided email\n    if (customerInfo.email) {\n      await invoiceService.sendInvoiceByEmail(invoiceData, customerInfo.email);\n      console.log('Invoice sent via email');\n    }\n    \n    // Send via SMS if customer provided phone\n    if (customerInfo.phone) {\n      await invoiceService.sendInvoiceBySMS(invoiceData, customerInfo.phone);\n      console.log('Invoice sent via SMS');\n    }\n    \n    // Also offer download option\n    return invoiceData;\n  } catch (error) {\n    console.error('Error sending invoice:', error);\n    throw error;\n  }\n};\n\nexport { InvoiceService, sendInvoiceToCustomer };"],"mappings":"AAAA,SAASA,KAAK,QAAQ,OAAO;AAC7B,OAAOC,WAAW,MAAM,aAAa;AAErC,MAAMC,cAAc,CAAC;EAEnB;EACAC,mBAAmBA,CAACC,YAAY,EAAEC,YAAY,EAAEC,QAAQ,EAAE;IACxD,MAAMC,aAAa,GAAG,OAAOH,YAAY,CAACI,QAAQ,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE;IAChF,MAAMC,WAAW,GAAG,IAAIF,IAAI,CAAC,CAAC,CAACG,kBAAkB,CAAC,OAAO,CAAC;IAC1D,MAAMC,OAAO,GAAG,IAAIJ,IAAI,CAACA,IAAI,CAACK,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACF,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;;IAE7F,OAAO;MACLG,OAAO,EAAE;QACPC,MAAM,EAAET,aAAa;QACrBU,IAAI,EAAEN,WAAW;QACjBE,OAAO,EAAEA,OAAO;QAChBK,MAAM,EAAEd,YAAY,CAACe,cAAc,KAAK,WAAW,GAAG,MAAM,GAAG;MACjE,CAAC;MACDC,OAAO,EAAE;QACPC,IAAI,EAAE,wBAAwB;QAC9BC,OAAO,EAAE,iBAAiB;QAC1BC,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE,UAAU;QACpBC,KAAK,EAAE,eAAe;QACtBC,KAAK,EAAE,gCAAgC;QACvCC,OAAO,EAAE;MACX,CAAC;MACDC,QAAQ,EAAE;QACRP,IAAI,EAAEhB,YAAY,CAACgB,IAAI;QACvBK,KAAK,EAAErB,YAAY,CAACqB,KAAK;QACzBD,KAAK,EAAEpB,YAAY,CAACoB,KAAK;QACzBH,OAAO,EAAEjB,YAAY,CAACiB;MACxB,CAAC;MACDO,KAAK,EAAE;QACLC,EAAE,EAAE1B,YAAY,CAACI,QAAQ;QACzBS,IAAI,EAAE,IAAIR,IAAI,CAACL,YAAY,CAAC2B,UAAU,CAAC,CAACnB,kBAAkB,CAAC,OAAO,CAAC;QACnEoB,YAAY,EAAE,IAAIvB,IAAI,CAACL,YAAY,CAAC6B,aAAa,CAAC,CAACrB,kBAAkB,CAAC,OAAO,CAAC;QAC9EsB,IAAI,EAAE7B,YAAY,CAAC8B,SAAS;QAC5BC,QAAQ,EAAE,CAAA9B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEe,IAAI,KAAI;MAC9B,CAAC;MACDgB,KAAK,EAAEC,MAAM,CAACC,MAAM,CAACnC,YAAY,CAACiC,KAAK,CAAC,CAACG,GAAG,CAACC,IAAI,KAAK;QACpDpB,IAAI,EAAEoB,IAAI,CAACC,SAAS;QACpBC,QAAQ,EAAEF,IAAI,CAACE,QAAQ;QACvBC,SAAS,EAAEC,UAAU,CAACJ,IAAI,CAACK,KAAK,CAAC;QACjCC,KAAK,EAAEF,UAAU,CAACJ,IAAI,CAACK,KAAK,CAAC,GAAGL,IAAI,CAACE,QAAQ;QAC7CK,WAAW,EAAEP,IAAI,CAACO,WAAW,IAAI;MACnC,CAAC,CAAC,CAAC;MACHC,MAAM,EAAE;QACNC,QAAQ,EAAEL,UAAU,CAACzC,YAAY,CAAC2C,KAAK,CAAC;QACxCI,GAAG,EAAE,CAAC;QAAE;QACRJ,KAAK,EAAEF,UAAU,CAACzC,YAAY,CAAC2C,KAAK;MACtC,CAAC;MACDK,KAAK,EAAEhD,YAAY,CAACiD,oBAAoB,IAAIhD,YAAY,CAAC+C,KAAK,IAAI,EAAE;MACpEE,aAAa,EAAElD,YAAY,CAACmD;IAC9B,CAAC;EACH;;EAEA;EACAC,mBAAmBA,CAACC,WAAW,EAAE;IAC/B,OAAO;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}